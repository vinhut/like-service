// Code generated by MockGen. DO NOT EDIT.
// Source: models/like.go

// Package mock_models is a generated GoMock package.
package mocks_models

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/vinhut/like-service/models"
	reflect "reflect"
)

// MockLikeDatabase is a mock of LikeDatabase interface
type MockLikeDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockLikeDatabaseMockRecorder
}

// MockLikeDatabaseMockRecorder is the mock recorder for MockLikeDatabase
type MockLikeDatabaseMockRecorder struct {
	mock *MockLikeDatabase
}

// NewMockLikeDatabase creates a new mock instance
func NewMockLikeDatabase(ctrl *gomock.Controller) *MockLikeDatabase {
	mock := &MockLikeDatabase{ctrl: ctrl}
	mock.recorder = &MockLikeDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLikeDatabase) EXPECT() *MockLikeDatabaseMockRecorder {
	return m.recorder
}

// FindPost mocks base method
func (m *MockLikeDatabase) FindPost(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPost", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPost indicates an expected call of FindPost
func (mr *MockLikeDatabaseMockRecorder) FindPost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPost", reflect.TypeOf((*MockLikeDatabase)(nil).FindPost), arg0)
}

// PostIsLiked mocks base method
func (m *MockLikeDatabase) PostIsLiked(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostIsLiked", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostIsLiked indicates an expected call of PostIsLiked
func (mr *MockLikeDatabaseMockRecorder) PostIsLiked(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostIsLiked", reflect.TypeOf((*MockLikeDatabase)(nil).PostIsLiked), arg0, arg1)
}

// CreatePostLike mocks base method
func (m *MockLikeDatabase) CreatePostLike(arg0 models.PostLike) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePostLike", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePostLike indicates an expected call of CreatePostLike
func (mr *MockLikeDatabaseMockRecorder) CreatePostLike(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePostLike", reflect.TypeOf((*MockLikeDatabase)(nil).CreatePostLike), arg0)
}

// DeletePostLike mocks base method
func (m *MockLikeDatabase) DeletePostLike(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePostLike", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePostLike indicates an expected call of DeletePostLike
func (mr *MockLikeDatabaseMockRecorder) DeletePostLike(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePostLike", reflect.TypeOf((*MockLikeDatabase)(nil).DeletePostLike), arg0, arg1)
}

// FindComment mocks base method
func (m *MockLikeDatabase) FindComment(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindComment", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindComment indicates an expected call of FindComment
func (mr *MockLikeDatabaseMockRecorder) FindComment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindComment", reflect.TypeOf((*MockLikeDatabase)(nil).FindComment), arg0)
}

// CommentIsLiked mocks base method
func (m *MockLikeDatabase) CommentIsLiked(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommentIsLiked", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommentIsLiked indicates an expected call of CommentIsLiked
func (mr *MockLikeDatabaseMockRecorder) CommentIsLiked(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommentIsLiked", reflect.TypeOf((*MockLikeDatabase)(nil).CommentIsLiked), arg0, arg1)
}

// CreateCommentLike mocks base method
func (m *MockLikeDatabase) CreateCommentLike(arg0 models.CommentLike) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommentLike", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCommentLike indicates an expected call of CreateCommentLike
func (mr *MockLikeDatabaseMockRecorder) CreateCommentLike(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommentLike", reflect.TypeOf((*MockLikeDatabase)(nil).CreateCommentLike), arg0)
}

// DeleteCommentLike mocks base method
func (m *MockLikeDatabase) DeleteCommentLike(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCommentLike", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCommentLike indicates an expected call of DeleteCommentLike
func (mr *MockLikeDatabaseMockRecorder) DeleteCommentLike(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommentLike", reflect.TypeOf((*MockLikeDatabase)(nil).DeleteCommentLike), arg0, arg1)
}

// FindUserLike mocks base method
func (m *MockLikeDatabase) FindUserLike(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserLike", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserLike indicates an expected call of FindUserLike
func (mr *MockLikeDatabaseMockRecorder) FindUserLike(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserLike", reflect.TypeOf((*MockLikeDatabase)(nil).FindUserLike), arg0)
}
